// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PFA__Project.Data;

#nullable disable

namespace PFA__Project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240320002729_SecoMig")]
    partial class SecoMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PFA__Project.Models.Artisan", b =>
                {
                    b.Property<int>("IdArtisan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArtisan"));

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategorieIdCategorie")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int");

                    b.Property<string>("ImageDeCarteID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbrAnneeExperience")
                        .HasColumnType("int");

                    b.Property<string>("NumTele")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PrixDeService")
                        .HasColumnType("real");

                    b.HasKey("IdArtisan");

                    b.HasIndex("CategorieIdCategorie");

                    b.HasIndex("IdUtilisateur")
                        .IsUnique();

                    b.ToTable("Artisans");
                });

            modelBuilder.Entity("PFA__Project.Models.ArtisanCategorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("CategorieId");

                    b.ToTable("ArtisansCategories");
                });

            modelBuilder.Entity("PFA__Project.Models.Categorie", b =>
                {
                    b.Property<int>("IdCategorie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategorie"));

                    b.Property<string>("DescriptionCategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomCategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategorie");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PFA__Project.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("IdClient");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PFA__Project.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateNotification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PFA__Project.Models.RendezVous", b =>
                {
                    b.Property<int>("IdRendezVous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRendezVous"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRendezVous")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TauxService")
                        .HasColumnType("float");

                    b.HasKey("IdRendezVous");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("ClientId");

                    b.ToTable("RendezVous");
                });

            modelBuilder.Entity("PFA__Project.Models.Utilisateur", b =>
                {
                    b.Property<int>("IdUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUtilisateur"));

                    b.Property<DateTime>("DateInscription")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUtilisateur");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("PFA__Project.Models.Artisan", b =>
                {
                    b.HasOne("PFA__Project.Models.Categorie", null)
                        .WithMany("Artisans")
                        .HasForeignKey("CategorieIdCategorie");

                    b.HasOne("PFA__Project.Models.Utilisateur", "Utilisateur")
                        .WithOne("Artisan")
                        .HasForeignKey("PFA__Project.Models.Artisan", "IdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("PFA__Project.Models.ArtisanCategorie", b =>
                {
                    b.HasOne("PFA__Project.Models.Artisan", "Artisan")
                        .WithMany("ArtisanCategories")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFA__Project.Models.Categorie", "Categorie")
                        .WithMany()
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("PFA__Project.Models.Client", b =>
                {
                    b.HasOne("PFA__Project.Models.Utilisateur", "Utilisateur")
                        .WithOne("Client")
                        .HasForeignKey("PFA__Project.Models.Client", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("PFA__Project.Models.Notification", b =>
                {
                    b.HasOne("PFA__Project.Models.Utilisateur", "utilisateur")
                        .WithMany("Notifications")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("PFA__Project.Models.RendezVous", b =>
                {
                    b.HasOne("PFA__Project.Models.Artisan", "Artisan")
                        .WithMany("RendezVous")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFA__Project.Models.Client", "Client")
                        .WithMany("RendezVous")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PFA__Project.Models.Artisan", b =>
                {
                    b.Navigation("ArtisanCategories");

                    b.Navigation("RendezVous");
                });

            modelBuilder.Entity("PFA__Project.Models.Categorie", b =>
                {
                    b.Navigation("Artisans");
                });

            modelBuilder.Entity("PFA__Project.Models.Client", b =>
                {
                    b.Navigation("RendezVous");
                });

            modelBuilder.Entity("PFA__Project.Models.Utilisateur", b =>
                {
                    b.Navigation("Artisan");

                    b.Navigation("Client");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
